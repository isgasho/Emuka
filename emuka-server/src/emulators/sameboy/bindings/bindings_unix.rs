/* automatically generated by rust-bindgen 0.57.0 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 33;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const RETRO_API_VERSION: u32 = 1;
pub const RETRO_DEVICE_TYPE_SHIFT: u32 = 8;
pub const RETRO_DEVICE_MASK: u32 = 255;
pub const RETRO_DEVICE_NONE: u32 = 0;
pub const RETRO_DEVICE_JOYPAD: u32 = 1;
pub const RETRO_DEVICE_MOUSE: u32 = 2;
pub const RETRO_DEVICE_KEYBOARD: u32 = 3;
pub const RETRO_DEVICE_LIGHTGUN: u32 = 4;
pub const RETRO_DEVICE_ANALOG: u32 = 5;
pub const RETRO_DEVICE_POINTER: u32 = 6;
pub const RETRO_DEVICE_ID_JOYPAD_B: u32 = 0;
pub const RETRO_DEVICE_ID_JOYPAD_Y: u32 = 1;
pub const RETRO_DEVICE_ID_JOYPAD_SELECT: u32 = 2;
pub const RETRO_DEVICE_ID_JOYPAD_START: u32 = 3;
pub const RETRO_DEVICE_ID_JOYPAD_UP: u32 = 4;
pub const RETRO_DEVICE_ID_JOYPAD_DOWN: u32 = 5;
pub const RETRO_DEVICE_ID_JOYPAD_LEFT: u32 = 6;
pub const RETRO_DEVICE_ID_JOYPAD_RIGHT: u32 = 7;
pub const RETRO_DEVICE_ID_JOYPAD_A: u32 = 8;
pub const RETRO_DEVICE_ID_JOYPAD_X: u32 = 9;
pub const RETRO_DEVICE_ID_JOYPAD_L: u32 = 10;
pub const RETRO_DEVICE_ID_JOYPAD_R: u32 = 11;
pub const RETRO_DEVICE_ID_JOYPAD_L2: u32 = 12;
pub const RETRO_DEVICE_ID_JOYPAD_R2: u32 = 13;
pub const RETRO_DEVICE_ID_JOYPAD_L3: u32 = 14;
pub const RETRO_DEVICE_ID_JOYPAD_R3: u32 = 15;
pub const RETRO_DEVICE_ID_JOYPAD_MASK: u32 = 256;
pub const RETRO_DEVICE_INDEX_ANALOG_LEFT: u32 = 0;
pub const RETRO_DEVICE_INDEX_ANALOG_RIGHT: u32 = 1;
pub const RETRO_DEVICE_INDEX_ANALOG_BUTTON: u32 = 2;
pub const RETRO_DEVICE_ID_ANALOG_X: u32 = 0;
pub const RETRO_DEVICE_ID_ANALOG_Y: u32 = 1;
pub const RETRO_DEVICE_ID_MOUSE_X: u32 = 0;
pub const RETRO_DEVICE_ID_MOUSE_Y: u32 = 1;
pub const RETRO_DEVICE_ID_MOUSE_LEFT: u32 = 2;
pub const RETRO_DEVICE_ID_MOUSE_RIGHT: u32 = 3;
pub const RETRO_DEVICE_ID_MOUSE_WHEELUP: u32 = 4;
pub const RETRO_DEVICE_ID_MOUSE_WHEELDOWN: u32 = 5;
pub const RETRO_DEVICE_ID_MOUSE_MIDDLE: u32 = 6;
pub const RETRO_DEVICE_ID_MOUSE_HORIZ_WHEELUP: u32 = 7;
pub const RETRO_DEVICE_ID_MOUSE_HORIZ_WHEELDOWN: u32 = 8;
pub const RETRO_DEVICE_ID_MOUSE_BUTTON_4: u32 = 9;
pub const RETRO_DEVICE_ID_MOUSE_BUTTON_5: u32 = 10;
pub const RETRO_DEVICE_ID_LIGHTGUN_SCREEN_X: u32 = 13;
pub const RETRO_DEVICE_ID_LIGHTGUN_SCREEN_Y: u32 = 14;
pub const RETRO_DEVICE_ID_LIGHTGUN_IS_OFFSCREEN: u32 = 15;
pub const RETRO_DEVICE_ID_LIGHTGUN_TRIGGER: u32 = 2;
pub const RETRO_DEVICE_ID_LIGHTGUN_RELOAD: u32 = 16;
pub const RETRO_DEVICE_ID_LIGHTGUN_AUX_A: u32 = 3;
pub const RETRO_DEVICE_ID_LIGHTGUN_AUX_B: u32 = 4;
pub const RETRO_DEVICE_ID_LIGHTGUN_START: u32 = 6;
pub const RETRO_DEVICE_ID_LIGHTGUN_SELECT: u32 = 7;
pub const RETRO_DEVICE_ID_LIGHTGUN_AUX_C: u32 = 8;
pub const RETRO_DEVICE_ID_LIGHTGUN_DPAD_UP: u32 = 9;
pub const RETRO_DEVICE_ID_LIGHTGUN_DPAD_DOWN: u32 = 10;
pub const RETRO_DEVICE_ID_LIGHTGUN_DPAD_LEFT: u32 = 11;
pub const RETRO_DEVICE_ID_LIGHTGUN_DPAD_RIGHT: u32 = 12;
pub const RETRO_DEVICE_ID_LIGHTGUN_X: u32 = 0;
pub const RETRO_DEVICE_ID_LIGHTGUN_Y: u32 = 1;
pub const RETRO_DEVICE_ID_LIGHTGUN_CURSOR: u32 = 3;
pub const RETRO_DEVICE_ID_LIGHTGUN_TURBO: u32 = 4;
pub const RETRO_DEVICE_ID_LIGHTGUN_PAUSE: u32 = 5;
pub const RETRO_DEVICE_ID_POINTER_X: u32 = 0;
pub const RETRO_DEVICE_ID_POINTER_Y: u32 = 1;
pub const RETRO_DEVICE_ID_POINTER_PRESSED: u32 = 2;
pub const RETRO_DEVICE_ID_POINTER_COUNT: u32 = 3;
pub const RETRO_REGION_NTSC: u32 = 0;
pub const RETRO_REGION_PAL: u32 = 1;
pub const RETRO_MEMORY_MASK: u32 = 255;
pub const RETRO_MEMORY_SAVE_RAM: u32 = 0;
pub const RETRO_MEMORY_RTC: u32 = 1;
pub const RETRO_MEMORY_SYSTEM_RAM: u32 = 2;
pub const RETRO_MEMORY_VIDEO_RAM: u32 = 3;
pub const RETRO_ENVIRONMENT_EXPERIMENTAL: u32 = 65536;
pub const RETRO_ENVIRONMENT_PRIVATE: u32 = 131072;
pub const RETRO_ENVIRONMENT_SET_ROTATION: u32 = 1;
pub const RETRO_ENVIRONMENT_GET_OVERSCAN: u32 = 2;
pub const RETRO_ENVIRONMENT_GET_CAN_DUPE: u32 = 3;
pub const RETRO_ENVIRONMENT_SET_MESSAGE: u32 = 6;
pub const RETRO_ENVIRONMENT_SHUTDOWN: u32 = 7;
pub const RETRO_ENVIRONMENT_SET_PERFORMANCE_LEVEL: u32 = 8;
pub const RETRO_ENVIRONMENT_GET_SYSTEM_DIRECTORY: u32 = 9;
pub const RETRO_ENVIRONMENT_SET_PIXEL_FORMAT: u32 = 10;
pub const RETRO_ENVIRONMENT_SET_INPUT_DESCRIPTORS: u32 = 11;
pub const RETRO_ENVIRONMENT_SET_KEYBOARD_CALLBACK: u32 = 12;
pub const RETRO_ENVIRONMENT_SET_DISK_CONTROL_INTERFACE: u32 = 13;
pub const RETRO_ENVIRONMENT_SET_HW_RENDER: u32 = 14;
pub const RETRO_ENVIRONMENT_GET_VARIABLE: u32 = 15;
pub const RETRO_ENVIRONMENT_SET_VARIABLES: u32 = 16;
pub const RETRO_ENVIRONMENT_GET_VARIABLE_UPDATE: u32 = 17;
pub const RETRO_ENVIRONMENT_SET_SUPPORT_NO_GAME: u32 = 18;
pub const RETRO_ENVIRONMENT_GET_LIBRETRO_PATH: u32 = 19;
pub const RETRO_ENVIRONMENT_SET_FRAME_TIME_CALLBACK: u32 = 21;
pub const RETRO_ENVIRONMENT_SET_AUDIO_CALLBACK: u32 = 22;
pub const RETRO_ENVIRONMENT_GET_RUMBLE_INTERFACE: u32 = 23;
pub const RETRO_ENVIRONMENT_GET_INPUT_DEVICE_CAPABILITIES: u32 = 24;
pub const RETRO_ENVIRONMENT_GET_SENSOR_INTERFACE: u32 = 65561;
pub const RETRO_ENVIRONMENT_GET_CAMERA_INTERFACE: u32 = 65562;
pub const RETRO_ENVIRONMENT_GET_LOG_INTERFACE: u32 = 27;
pub const RETRO_ENVIRONMENT_GET_PERF_INTERFACE: u32 = 28;
pub const RETRO_ENVIRONMENT_GET_LOCATION_INTERFACE: u32 = 29;
pub const RETRO_ENVIRONMENT_GET_CONTENT_DIRECTORY: u32 = 30;
pub const RETRO_ENVIRONMENT_GET_CORE_ASSETS_DIRECTORY: u32 = 30;
pub const RETRO_ENVIRONMENT_GET_SAVE_DIRECTORY: u32 = 31;
pub const RETRO_ENVIRONMENT_SET_SYSTEM_AV_INFO: u32 = 32;
pub const RETRO_ENVIRONMENT_SET_PROC_ADDRESS_CALLBACK: u32 = 33;
pub const RETRO_ENVIRONMENT_SET_SUBSYSTEM_INFO: u32 = 34;
pub const RETRO_ENVIRONMENT_SET_CONTROLLER_INFO: u32 = 35;
pub const RETRO_ENVIRONMENT_SET_MEMORY_MAPS: u32 = 65572;
pub const RETRO_ENVIRONMENT_SET_GEOMETRY: u32 = 37;
pub const RETRO_ENVIRONMENT_GET_USERNAME: u32 = 38;
pub const RETRO_ENVIRONMENT_GET_LANGUAGE: u32 = 39;
pub const RETRO_ENVIRONMENT_GET_CURRENT_SOFTWARE_FRAMEBUFFER: u32 = 65576;
pub const RETRO_ENVIRONMENT_GET_HW_RENDER_INTERFACE: u32 = 65577;
pub const RETRO_ENVIRONMENT_SET_SUPPORT_ACHIEVEMENTS: u32 = 65578;
pub const RETRO_ENVIRONMENT_SET_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE: u32 = 65579;
pub const RETRO_ENVIRONMENT_SET_SERIALIZATION_QUIRKS: u32 = 44;
pub const RETRO_ENVIRONMENT_SET_HW_SHARED_CONTEXT: u32 = 65580;
pub const RETRO_ENVIRONMENT_GET_VFS_INTERFACE: u32 = 65581;
pub const RETRO_ENVIRONMENT_GET_LED_INTERFACE: u32 = 65582;
pub const RETRO_ENVIRONMENT_GET_AUDIO_VIDEO_ENABLE: u32 = 65583;
pub const RETRO_ENVIRONMENT_GET_MIDI_INTERFACE: u32 = 65584;
pub const RETRO_ENVIRONMENT_GET_FASTFORWARDING: u32 = 65585;
pub const RETRO_ENVIRONMENT_GET_TARGET_REFRESH_RATE: u32 = 65586;
pub const RETRO_ENVIRONMENT_GET_INPUT_BITMASKS: u32 = 65587;
pub const RETRO_ENVIRONMENT_GET_CORE_OPTIONS_VERSION: u32 = 52;
pub const RETRO_ENVIRONMENT_SET_CORE_OPTIONS: u32 = 53;
pub const RETRO_ENVIRONMENT_SET_CORE_OPTIONS_INTL: u32 = 54;
pub const RETRO_ENVIRONMENT_SET_CORE_OPTIONS_DISPLAY: u32 = 55;
pub const RETRO_VFS_FILE_ACCESS_READ: u32 = 1;
pub const RETRO_VFS_FILE_ACCESS_WRITE: u32 = 2;
pub const RETRO_VFS_FILE_ACCESS_READ_WRITE: u32 = 3;
pub const RETRO_VFS_FILE_ACCESS_UPDATE_EXISTING: u32 = 4;
pub const RETRO_VFS_FILE_ACCESS_HINT_NONE: u32 = 0;
pub const RETRO_VFS_FILE_ACCESS_HINT_FREQUENT_ACCESS: u32 = 1;
pub const RETRO_VFS_SEEK_POSITION_START: u32 = 0;
pub const RETRO_VFS_SEEK_POSITION_CURRENT: u32 = 1;
pub const RETRO_VFS_SEEK_POSITION_END: u32 = 2;
pub const RETRO_VFS_STAT_IS_VALID: u32 = 1;
pub const RETRO_VFS_STAT_IS_DIRECTORY: u32 = 2;
pub const RETRO_VFS_STAT_IS_CHARACTER_SPECIAL: u32 = 4;
pub const RETRO_SERIALIZATION_QUIRK_INCOMPLETE: u32 = 1;
pub const RETRO_SERIALIZATION_QUIRK_MUST_INITIALIZE: u32 = 2;
pub const RETRO_SERIALIZATION_QUIRK_CORE_VARIABLE_SIZE: u32 = 4;
pub const RETRO_SERIALIZATION_QUIRK_FRONT_VARIABLE_SIZE: u32 = 8;
pub const RETRO_SERIALIZATION_QUIRK_SINGLE_SESSION: u32 = 16;
pub const RETRO_SERIALIZATION_QUIRK_ENDIAN_DEPENDENT: u32 = 32;
pub const RETRO_SERIALIZATION_QUIRK_PLATFORM_DEPENDENT: u32 = 64;
pub const RETRO_MEMDESC_CONST: u32 = 1;
pub const RETRO_MEMDESC_BIGENDIAN: u32 = 2;
pub const RETRO_MEMDESC_SYSTEM_RAM: u32 = 4;
pub const RETRO_MEMDESC_SAVE_RAM: u32 = 8;
pub const RETRO_MEMDESC_VIDEO_RAM: u32 = 16;
pub const RETRO_MEMDESC_ALIGN_2: u32 = 65536;
pub const RETRO_MEMDESC_ALIGN_4: u32 = 131072;
pub const RETRO_MEMDESC_ALIGN_8: u32 = 196608;
pub const RETRO_MEMDESC_MINSIZE_2: u32 = 16777216;
pub const RETRO_MEMDESC_MINSIZE_4: u32 = 33554432;
pub const RETRO_MEMDESC_MINSIZE_8: u32 = 50331648;
pub const RETRO_SIMD_SSE: u32 = 1;
pub const RETRO_SIMD_SSE2: u32 = 2;
pub const RETRO_SIMD_VMX: u32 = 4;
pub const RETRO_SIMD_VMX128: u32 = 8;
pub const RETRO_SIMD_AVX: u32 = 16;
pub const RETRO_SIMD_NEON: u32 = 32;
pub const RETRO_SIMD_SSE3: u32 = 64;
pub const RETRO_SIMD_SSSE3: u32 = 128;
pub const RETRO_SIMD_MMX: u32 = 256;
pub const RETRO_SIMD_MMXEXT: u32 = 512;
pub const RETRO_SIMD_SSE4: u32 = 1024;
pub const RETRO_SIMD_SSE42: u32 = 2048;
pub const RETRO_SIMD_AVX2: u32 = 4096;
pub const RETRO_SIMD_VFPU: u32 = 8192;
pub const RETRO_SIMD_PS: u32 = 16384;
pub const RETRO_SIMD_AES: u32 = 32768;
pub const RETRO_SIMD_VFPV3: u32 = 65536;
pub const RETRO_SIMD_VFPV4: u32 = 131072;
pub const RETRO_SIMD_POPCNT: u32 = 262144;
pub const RETRO_SIMD_MOVBE: u32 = 524288;
pub const RETRO_SIMD_CMOV: u32 = 1048576;
pub const RETRO_SIMD_ASIMD: u32 = 2097152;
pub const RETRO_SENSOR_ACCELEROMETER_X: u32 = 0;
pub const RETRO_SENSOR_ACCELEROMETER_Y: u32 = 1;
pub const RETRO_SENSOR_ACCELEROMETER_Z: u32 = 2;
pub const RETRO_NUM_CORE_OPTION_VALUES_MAX: u32 = 128;
pub const RETRO_MEMORY_ACCESS_WRITE: u32 = 1;
pub const RETRO_MEMORY_ACCESS_READ: u32 = 2;
pub const RETRO_MEMORY_TYPE_CACHED: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_language {
    RETRO_LANGUAGE_ENGLISH = 0,
    RETRO_LANGUAGE_JAPANESE = 1,
    RETRO_LANGUAGE_FRENCH = 2,
    RETRO_LANGUAGE_SPANISH = 3,
    RETRO_LANGUAGE_GERMAN = 4,
    RETRO_LANGUAGE_ITALIAN = 5,
    RETRO_LANGUAGE_DUTCH = 6,
    RETRO_LANGUAGE_PORTUGUESE_BRAZIL = 7,
    RETRO_LANGUAGE_PORTUGUESE_PORTUGAL = 8,
    RETRO_LANGUAGE_RUSSIAN = 9,
    RETRO_LANGUAGE_KOREAN = 10,
    RETRO_LANGUAGE_CHINESE_TRADITIONAL = 11,
    RETRO_LANGUAGE_CHINESE_SIMPLIFIED = 12,
    RETRO_LANGUAGE_ESPERANTO = 13,
    RETRO_LANGUAGE_POLISH = 14,
    RETRO_LANGUAGE_VIETNAMESE = 15,
    RETRO_LANGUAGE_ARABIC = 16,
    RETRO_LANGUAGE_GREEK = 17,
    RETRO_LANGUAGE_TURKISH = 18,
    RETRO_LANGUAGE_LAST = 19,
    RETRO_LANGUAGE_DUMMY = 2147483647,
}
impl retro_key {
    pub const RETROK_FIRST: retro_key = retro_key::RETROK_UNKNOWN;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_key {
    RETROK_UNKNOWN = 0,
    RETROK_BACKSPACE = 8,
    RETROK_TAB = 9,
    RETROK_CLEAR = 12,
    RETROK_RETURN = 13,
    RETROK_PAUSE = 19,
    RETROK_ESCAPE = 27,
    RETROK_SPACE = 32,
    RETROK_EXCLAIM = 33,
    RETROK_QUOTEDBL = 34,
    RETROK_HASH = 35,
    RETROK_DOLLAR = 36,
    RETROK_AMPERSAND = 38,
    RETROK_QUOTE = 39,
    RETROK_LEFTPAREN = 40,
    RETROK_RIGHTPAREN = 41,
    RETROK_ASTERISK = 42,
    RETROK_PLUS = 43,
    RETROK_COMMA = 44,
    RETROK_MINUS = 45,
    RETROK_PERIOD = 46,
    RETROK_SLASH = 47,
    RETROK_0 = 48,
    RETROK_1 = 49,
    RETROK_2 = 50,
    RETROK_3 = 51,
    RETROK_4 = 52,
    RETROK_5 = 53,
    RETROK_6 = 54,
    RETROK_7 = 55,
    RETROK_8 = 56,
    RETROK_9 = 57,
    RETROK_COLON = 58,
    RETROK_SEMICOLON = 59,
    RETROK_LESS = 60,
    RETROK_EQUALS = 61,
    RETROK_GREATER = 62,
    RETROK_QUESTION = 63,
    RETROK_AT = 64,
    RETROK_LEFTBRACKET = 91,
    RETROK_BACKSLASH = 92,
    RETROK_RIGHTBRACKET = 93,
    RETROK_CARET = 94,
    RETROK_UNDERSCORE = 95,
    RETROK_BACKQUOTE = 96,
    RETROK_a = 97,
    RETROK_b = 98,
    RETROK_c = 99,
    RETROK_d = 100,
    RETROK_e = 101,
    RETROK_f = 102,
    RETROK_g = 103,
    RETROK_h = 104,
    RETROK_i = 105,
    RETROK_j = 106,
    RETROK_k = 107,
    RETROK_l = 108,
    RETROK_m = 109,
    RETROK_n = 110,
    RETROK_o = 111,
    RETROK_p = 112,
    RETROK_q = 113,
    RETROK_r = 114,
    RETROK_s = 115,
    RETROK_t = 116,
    RETROK_u = 117,
    RETROK_v = 118,
    RETROK_w = 119,
    RETROK_x = 120,
    RETROK_y = 121,
    RETROK_z = 122,
    RETROK_LEFTBRACE = 123,
    RETROK_BAR = 124,
    RETROK_RIGHTBRACE = 125,
    RETROK_TILDE = 126,
    RETROK_DELETE = 127,
    RETROK_KP0 = 256,
    RETROK_KP1 = 257,
    RETROK_KP2 = 258,
    RETROK_KP3 = 259,
    RETROK_KP4 = 260,
    RETROK_KP5 = 261,
    RETROK_KP6 = 262,
    RETROK_KP7 = 263,
    RETROK_KP8 = 264,
    RETROK_KP9 = 265,
    RETROK_KP_PERIOD = 266,
    RETROK_KP_DIVIDE = 267,
    RETROK_KP_MULTIPLY = 268,
    RETROK_KP_MINUS = 269,
    RETROK_KP_PLUS = 270,
    RETROK_KP_ENTER = 271,
    RETROK_KP_EQUALS = 272,
    RETROK_UP = 273,
    RETROK_DOWN = 274,
    RETROK_RIGHT = 275,
    RETROK_LEFT = 276,
    RETROK_INSERT = 277,
    RETROK_HOME = 278,
    RETROK_END = 279,
    RETROK_PAGEUP = 280,
    RETROK_PAGEDOWN = 281,
    RETROK_F1 = 282,
    RETROK_F2 = 283,
    RETROK_F3 = 284,
    RETROK_F4 = 285,
    RETROK_F5 = 286,
    RETROK_F6 = 287,
    RETROK_F7 = 288,
    RETROK_F8 = 289,
    RETROK_F9 = 290,
    RETROK_F10 = 291,
    RETROK_F11 = 292,
    RETROK_F12 = 293,
    RETROK_F13 = 294,
    RETROK_F14 = 295,
    RETROK_F15 = 296,
    RETROK_NUMLOCK = 300,
    RETROK_CAPSLOCK = 301,
    RETROK_SCROLLOCK = 302,
    RETROK_RSHIFT = 303,
    RETROK_LSHIFT = 304,
    RETROK_RCTRL = 305,
    RETROK_LCTRL = 306,
    RETROK_RALT = 307,
    RETROK_LALT = 308,
    RETROK_RMETA = 309,
    RETROK_LMETA = 310,
    RETROK_LSUPER = 311,
    RETROK_RSUPER = 312,
    RETROK_MODE = 313,
    RETROK_COMPOSE = 314,
    RETROK_HELP = 315,
    RETROK_PRINT = 316,
    RETROK_SYSREQ = 317,
    RETROK_BREAK = 318,
    RETROK_MENU = 319,
    RETROK_POWER = 320,
    RETROK_EURO = 321,
    RETROK_UNDO = 322,
    RETROK_OEM_102 = 323,
    RETROK_LAST = 324,
    RETROK_DUMMY = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_mod {
    RETROKMOD_NONE = 0,
    RETROKMOD_SHIFT = 1,
    RETROKMOD_CTRL = 2,
    RETROKMOD_ALT = 4,
    RETROKMOD_META = 8,
    RETROKMOD_NUMLOCK = 16,
    RETROKMOD_CAPSLOCK = 32,
    RETROKMOD_SCROLLOCK = 64,
    RETROKMOD_DUMMY = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_vfs_file_handle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_vfs_dir_handle {
    _unused: [u8; 0],
}
pub type retro_vfs_get_path_t = ::std::option::Option<
    unsafe extern "C" fn(stream: *mut retro_vfs_file_handle) -> *const ::std::os::raw::c_char,
>;
pub type retro_vfs_open_t = ::std::option::Option<
    unsafe extern "C" fn(
        path: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_uint,
        hints: ::std::os::raw::c_uint,
    ) -> *mut retro_vfs_file_handle,
>;
pub type retro_vfs_close_t = ::std::option::Option<
    unsafe extern "C" fn(stream: *mut retro_vfs_file_handle) -> ::std::os::raw::c_int,
>;
pub type retro_vfs_size_t =
    ::std::option::Option<unsafe extern "C" fn(stream: *mut retro_vfs_file_handle) -> i64>;
pub type retro_vfs_truncate_t = ::std::option::Option<
    unsafe extern "C" fn(stream: *mut retro_vfs_file_handle, length: i64) -> i64,
>;
pub type retro_vfs_tell_t =
    ::std::option::Option<unsafe extern "C" fn(stream: *mut retro_vfs_file_handle) -> i64>;
pub type retro_vfs_seek_t = ::std::option::Option<
    unsafe extern "C" fn(
        stream: *mut retro_vfs_file_handle,
        offset: i64,
        seek_position: ::std::os::raw::c_int,
    ) -> i64,
>;
pub type retro_vfs_read_t = ::std::option::Option<
    unsafe extern "C" fn(
        stream: *mut retro_vfs_file_handle,
        s: *mut ::std::os::raw::c_void,
        len: u64,
    ) -> i64,
>;
pub type retro_vfs_write_t = ::std::option::Option<
    unsafe extern "C" fn(
        stream: *mut retro_vfs_file_handle,
        s: *const ::std::os::raw::c_void,
        len: u64,
    ) -> i64,
>;
pub type retro_vfs_flush_t = ::std::option::Option<
    unsafe extern "C" fn(stream: *mut retro_vfs_file_handle) -> ::std::os::raw::c_int,
>;
pub type retro_vfs_remove_t = ::std::option::Option<
    unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
>;
pub type retro_vfs_rename_t = ::std::option::Option<
    unsafe extern "C" fn(
        old_path: *const ::std::os::raw::c_char,
        new_path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type retro_vfs_stat_t = ::std::option::Option<
    unsafe extern "C" fn(
        path: *const ::std::os::raw::c_char,
        size: *mut i32,
    ) -> ::std::os::raw::c_int,
>;
pub type retro_vfs_mkdir_t = ::std::option::Option<
    unsafe extern "C" fn(dir: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
>;
pub type retro_vfs_opendir_t = ::std::option::Option<
    unsafe extern "C" fn(
        dir: *const ::std::os::raw::c_char,
        include_hidden: bool,
    ) -> *mut retro_vfs_dir_handle,
>;
pub type retro_vfs_readdir_t =
    ::std::option::Option<unsafe extern "C" fn(dirstream: *mut retro_vfs_dir_handle) -> bool>;
pub type retro_vfs_dirent_get_name_t = ::std::option::Option<
    unsafe extern "C" fn(dirstream: *mut retro_vfs_dir_handle) -> *const ::std::os::raw::c_char,
>;
pub type retro_vfs_dirent_is_dir_t =
    ::std::option::Option<unsafe extern "C" fn(dirstream: *mut retro_vfs_dir_handle) -> bool>;
pub type retro_vfs_closedir_t = ::std::option::Option<
    unsafe extern "C" fn(dirstream: *mut retro_vfs_dir_handle) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_vfs_interface {
    pub get_path: retro_vfs_get_path_t,
    pub open: retro_vfs_open_t,
    pub close: retro_vfs_close_t,
    pub size: retro_vfs_size_t,
    pub tell: retro_vfs_tell_t,
    pub seek: retro_vfs_seek_t,
    pub read: retro_vfs_read_t,
    pub write: retro_vfs_write_t,
    pub flush: retro_vfs_flush_t,
    pub remove: retro_vfs_remove_t,
    pub rename: retro_vfs_rename_t,
    pub truncate: retro_vfs_truncate_t,
    pub stat: retro_vfs_stat_t,
    pub mkdir: retro_vfs_mkdir_t,
    pub opendir: retro_vfs_opendir_t,
    pub readdir: retro_vfs_readdir_t,
    pub dirent_get_name: retro_vfs_dirent_get_name_t,
    pub dirent_is_dir: retro_vfs_dirent_is_dir_t,
    pub closedir: retro_vfs_closedir_t,
}
#[test]
fn bindgen_test_layout_retro_vfs_interface() {
    assert_eq!(
        ::std::mem::size_of::<retro_vfs_interface>(),
        152usize,
        concat!("Size of: ", stringify!(retro_vfs_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_vfs_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_vfs_interface))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface>())).get_path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(get_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface>())).open as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface>())).close as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface>())).tell as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(tell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface>())).seek as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface>())).read as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface>())).write as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface>())).flush as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface>())).remove as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(remove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface>())).rename as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(rename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface>())).truncate as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(truncate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface>())).stat as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface>())).mkdir as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(mkdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface>())).opendir as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(opendir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface>())).readdir as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(readdir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_vfs_interface>())).dirent_get_name as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(dirent_get_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_vfs_interface>())).dirent_is_dir as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(dirent_is_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface>())).closedir as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface),
            "::",
            stringify!(closedir)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_vfs_interface_info {
    pub required_interface_version: u32,
    pub iface: *mut retro_vfs_interface,
}
#[test]
fn bindgen_test_layout_retro_vfs_interface_info() {
    assert_eq!(
        ::std::mem::size_of::<retro_vfs_interface_info>(),
        16usize,
        concat!("Size of: ", stringify!(retro_vfs_interface_info))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_vfs_interface_info>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_vfs_interface_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_vfs_interface_info>())).required_interface_version
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface_info),
            "::",
            stringify!(required_interface_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_vfs_interface_info>())).iface as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_vfs_interface_info),
            "::",
            stringify!(iface)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_hw_render_interface_type {
    RETRO_HW_RENDER_INTERFACE_VULKAN = 0,
    RETRO_HW_RENDER_INTERFACE_D3D9 = 1,
    RETRO_HW_RENDER_INTERFACE_D3D10 = 2,
    RETRO_HW_RENDER_INTERFACE_D3D11 = 3,
    RETRO_HW_RENDER_INTERFACE_D3D12 = 4,
    RETRO_HW_RENDER_INTERFACE_GSKIT_PS2 = 5,
    RETRO_HW_RENDER_INTERFACE_DUMMY = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_hw_render_interface {
    pub interface_type: retro_hw_render_interface_type,
    pub interface_version: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_retro_hw_render_interface() {
    assert_eq!(
        ::std::mem::size_of::<retro_hw_render_interface>(),
        8usize,
        concat!("Size of: ", stringify!(retro_hw_render_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_hw_render_interface>(),
        4usize,
        concat!("Alignment of ", stringify!(retro_hw_render_interface))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_hw_render_interface>())).interface_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_hw_render_interface),
            "::",
            stringify!(interface_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_hw_render_interface>())).interface_version as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_hw_render_interface),
            "::",
            stringify!(interface_version)
        )
    );
}
pub type retro_set_led_state_t = ::std::option::Option<
    unsafe extern "C" fn(led: ::std::os::raw::c_int, state: ::std::os::raw::c_int),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_led_interface {
    pub set_led_state: retro_set_led_state_t,
}
#[test]
fn bindgen_test_layout_retro_led_interface() {
    assert_eq!(
        ::std::mem::size_of::<retro_led_interface>(),
        8usize,
        concat!("Size of: ", stringify!(retro_led_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_led_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_led_interface))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_led_interface>())).set_led_state as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_led_interface),
            "::",
            stringify!(set_led_state)
        )
    );
}
pub type retro_midi_input_enabled_t = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type retro_midi_output_enabled_t = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type retro_midi_read_t = ::std::option::Option<unsafe extern "C" fn(byte: *mut u8) -> bool>;
pub type retro_midi_write_t =
    ::std::option::Option<unsafe extern "C" fn(byte: u8, delta_time: u32) -> bool>;
pub type retro_midi_flush_t = ::std::option::Option<unsafe extern "C" fn() -> bool>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_midi_interface {
    pub input_enabled: retro_midi_input_enabled_t,
    pub output_enabled: retro_midi_output_enabled_t,
    pub read: retro_midi_read_t,
    pub write: retro_midi_write_t,
    pub flush: retro_midi_flush_t,
}
#[test]
fn bindgen_test_layout_retro_midi_interface() {
    assert_eq!(
        ::std::mem::size_of::<retro_midi_interface>(),
        40usize,
        concat!("Size of: ", stringify!(retro_midi_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_midi_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_midi_interface))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_midi_interface>())).input_enabled as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_midi_interface),
            "::",
            stringify!(input_enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_midi_interface>())).output_enabled as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_midi_interface),
            "::",
            stringify!(output_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_midi_interface>())).read as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_midi_interface),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_midi_interface>())).write as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_midi_interface),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_midi_interface>())).flush as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_midi_interface),
            "::",
            stringify!(flush)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_hw_render_context_negotiation_interface_type {
    RETRO_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE_VULKAN = 0,
    RETRO_HW_RENDER_CONTEXT_NEGOTIATION_INTERFACE_DUMMY = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_hw_render_context_negotiation_interface {
    pub interface_type: retro_hw_render_context_negotiation_interface_type,
    pub interface_version: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_retro_hw_render_context_negotiation_interface() {
    assert_eq!(
        ::std::mem::size_of::<retro_hw_render_context_negotiation_interface>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(retro_hw_render_context_negotiation_interface)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<retro_hw_render_context_negotiation_interface>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(retro_hw_render_context_negotiation_interface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_hw_render_context_negotiation_interface>())).interface_type
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_hw_render_context_negotiation_interface),
            "::",
            stringify!(interface_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_hw_render_context_negotiation_interface>()))
                .interface_version as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_hw_render_context_negotiation_interface),
            "::",
            stringify!(interface_version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_memory_descriptor {
    pub flags: u64,
    pub ptr: *mut ::std::os::raw::c_void,
    pub offset: size_t,
    pub start: size_t,
    pub select: size_t,
    pub disconnect: size_t,
    pub len: size_t,
    pub addrspace: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_retro_memory_descriptor() {
    assert_eq!(
        ::std::mem::size_of::<retro_memory_descriptor>(),
        64usize,
        concat!("Size of: ", stringify!(retro_memory_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_memory_descriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_memory_descriptor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_memory_descriptor>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_memory_descriptor),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_memory_descriptor>())).ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_memory_descriptor),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_memory_descriptor>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_memory_descriptor),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_memory_descriptor>())).start as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_memory_descriptor),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_memory_descriptor>())).select as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_memory_descriptor),
            "::",
            stringify!(select)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_memory_descriptor>())).disconnect as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_memory_descriptor),
            "::",
            stringify!(disconnect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_memory_descriptor>())).len as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_memory_descriptor),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_memory_descriptor>())).addrspace as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_memory_descriptor),
            "::",
            stringify!(addrspace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_memory_map {
    pub descriptors: *const retro_memory_descriptor,
    pub num_descriptors: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_retro_memory_map() {
    assert_eq!(
        ::std::mem::size_of::<retro_memory_map>(),
        16usize,
        concat!("Size of: ", stringify!(retro_memory_map))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_memory_map>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_memory_map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_memory_map>())).descriptors as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_memory_map),
            "::",
            stringify!(descriptors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_memory_map>())).num_descriptors as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_memory_map),
            "::",
            stringify!(num_descriptors)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_controller_description {
    pub desc: *const ::std::os::raw::c_char,
    pub id: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_retro_controller_description() {
    assert_eq!(
        ::std::mem::size_of::<retro_controller_description>(),
        16usize,
        concat!("Size of: ", stringify!(retro_controller_description))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_controller_description>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_controller_description))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_controller_description>())).desc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_controller_description),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_controller_description>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_controller_description),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_controller_info {
    pub types: *const retro_controller_description,
    pub num_types: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_retro_controller_info() {
    assert_eq!(
        ::std::mem::size_of::<retro_controller_info>(),
        16usize,
        concat!("Size of: ", stringify!(retro_controller_info))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_controller_info>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_controller_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_controller_info>())).types as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_controller_info),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_controller_info>())).num_types as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_controller_info),
            "::",
            stringify!(num_types)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_subsystem_memory_info {
    pub extension: *const ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_retro_subsystem_memory_info() {
    assert_eq!(
        ::std::mem::size_of::<retro_subsystem_memory_info>(),
        16usize,
        concat!("Size of: ", stringify!(retro_subsystem_memory_info))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_subsystem_memory_info>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_subsystem_memory_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_subsystem_memory_info>())).extension as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_subsystem_memory_info),
            "::",
            stringify!(extension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_subsystem_memory_info>())).type_ as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_subsystem_memory_info),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_subsystem_rom_info {
    pub desc: *const ::std::os::raw::c_char,
    pub valid_extensions: *const ::std::os::raw::c_char,
    pub need_fullpath: bool,
    pub block_extract: bool,
    pub required: bool,
    pub memory: *const retro_subsystem_memory_info,
    pub num_memory: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_retro_subsystem_rom_info() {
    assert_eq!(
        ::std::mem::size_of::<retro_subsystem_rom_info>(),
        40usize,
        concat!("Size of: ", stringify!(retro_subsystem_rom_info))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_subsystem_rom_info>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_subsystem_rom_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_subsystem_rom_info>())).desc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_subsystem_rom_info),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_subsystem_rom_info>())).valid_extensions as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_subsystem_rom_info),
            "::",
            stringify!(valid_extensions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_subsystem_rom_info>())).need_fullpath as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_subsystem_rom_info),
            "::",
            stringify!(need_fullpath)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_subsystem_rom_info>())).block_extract as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_subsystem_rom_info),
            "::",
            stringify!(block_extract)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_subsystem_rom_info>())).required as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_subsystem_rom_info),
            "::",
            stringify!(required)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_subsystem_rom_info>())).memory as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_subsystem_rom_info),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_subsystem_rom_info>())).num_memory as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_subsystem_rom_info),
            "::",
            stringify!(num_memory)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_subsystem_info {
    pub desc: *const ::std::os::raw::c_char,
    pub ident: *const ::std::os::raw::c_char,
    pub roms: *const retro_subsystem_rom_info,
    pub num_roms: ::std::os::raw::c_uint,
    pub id: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_retro_subsystem_info() {
    assert_eq!(
        ::std::mem::size_of::<retro_subsystem_info>(),
        32usize,
        concat!("Size of: ", stringify!(retro_subsystem_info))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_subsystem_info>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_subsystem_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_subsystem_info>())).desc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_subsystem_info),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_subsystem_info>())).ident as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_subsystem_info),
            "::",
            stringify!(ident)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_subsystem_info>())).roms as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_subsystem_info),
            "::",
            stringify!(roms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_subsystem_info>())).num_roms as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_subsystem_info),
            "::",
            stringify!(num_roms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_subsystem_info>())).id as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_subsystem_info),
            "::",
            stringify!(id)
        )
    );
}
pub type retro_proc_address_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type retro_get_proc_address_t = ::std::option::Option<
    unsafe extern "C" fn(sym: *const ::std::os::raw::c_char) -> retro_proc_address_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_get_proc_address_interface {
    pub get_proc_address: retro_get_proc_address_t,
}
#[test]
fn bindgen_test_layout_retro_get_proc_address_interface() {
    assert_eq!(
        ::std::mem::size_of::<retro_get_proc_address_interface>(),
        8usize,
        concat!("Size of: ", stringify!(retro_get_proc_address_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_get_proc_address_interface>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(retro_get_proc_address_interface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_get_proc_address_interface>())).get_proc_address
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_get_proc_address_interface),
            "::",
            stringify!(get_proc_address)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_log_level {
    RETRO_LOG_DEBUG = 0,
    RETRO_LOG_INFO = 1,
    RETRO_LOG_WARN = 2,
    RETRO_LOG_ERROR = 3,
    RETRO_LOG_DUMMY = 2147483647,
}
pub type retro_log_printf_t = ::std::option::Option<
    unsafe extern "C" fn(level: retro_log_level, fmt: *const ::std::os::raw::c_char, ...),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_log_callback {
    pub log: retro_log_printf_t,
}
#[test]
fn bindgen_test_layout_retro_log_callback() {
    assert_eq!(
        ::std::mem::size_of::<retro_log_callback>(),
        8usize,
        concat!("Size of: ", stringify!(retro_log_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_log_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_log_callback))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_log_callback>())).log as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_log_callback),
            "::",
            stringify!(log)
        )
    );
}
pub type retro_perf_tick_t = u64;
pub type retro_time_t = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_perf_counter {
    pub ident: *const ::std::os::raw::c_char,
    pub start: retro_perf_tick_t,
    pub total: retro_perf_tick_t,
    pub call_cnt: retro_perf_tick_t,
    pub registered: bool,
}
#[test]
fn bindgen_test_layout_retro_perf_counter() {
    assert_eq!(
        ::std::mem::size_of::<retro_perf_counter>(),
        40usize,
        concat!("Size of: ", stringify!(retro_perf_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_perf_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_perf_counter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_perf_counter>())).ident as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_perf_counter),
            "::",
            stringify!(ident)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_perf_counter>())).start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_perf_counter),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_perf_counter>())).total as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_perf_counter),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_perf_counter>())).call_cnt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_perf_counter),
            "::",
            stringify!(call_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_perf_counter>())).registered as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_perf_counter),
            "::",
            stringify!(registered)
        )
    );
}
pub type retro_perf_get_time_usec_t = ::std::option::Option<unsafe extern "C" fn() -> retro_time_t>;
pub type retro_perf_get_counter_t =
    ::std::option::Option<unsafe extern "C" fn() -> retro_perf_tick_t>;
pub type retro_get_cpu_features_t = ::std::option::Option<unsafe extern "C" fn() -> u64>;
pub type retro_perf_log_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type retro_perf_register_t =
    ::std::option::Option<unsafe extern "C" fn(counter: *mut retro_perf_counter)>;
pub type retro_perf_start_t =
    ::std::option::Option<unsafe extern "C" fn(counter: *mut retro_perf_counter)>;
pub type retro_perf_stop_t =
    ::std::option::Option<unsafe extern "C" fn(counter: *mut retro_perf_counter)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_perf_callback {
    pub get_time_usec: retro_perf_get_time_usec_t,
    pub get_cpu_features: retro_get_cpu_features_t,
    pub get_perf_counter: retro_perf_get_counter_t,
    pub perf_register: retro_perf_register_t,
    pub perf_start: retro_perf_start_t,
    pub perf_stop: retro_perf_stop_t,
    pub perf_log: retro_perf_log_t,
}
#[test]
fn bindgen_test_layout_retro_perf_callback() {
    assert_eq!(
        ::std::mem::size_of::<retro_perf_callback>(),
        56usize,
        concat!("Size of: ", stringify!(retro_perf_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_perf_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_perf_callback))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_perf_callback>())).get_time_usec as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_perf_callback),
            "::",
            stringify!(get_time_usec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_perf_callback>())).get_cpu_features as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_perf_callback),
            "::",
            stringify!(get_cpu_features)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_perf_callback>())).get_perf_counter as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_perf_callback),
            "::",
            stringify!(get_perf_counter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_perf_callback>())).perf_register as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_perf_callback),
            "::",
            stringify!(perf_register)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_perf_callback>())).perf_start as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_perf_callback),
            "::",
            stringify!(perf_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_perf_callback>())).perf_stop as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_perf_callback),
            "::",
            stringify!(perf_stop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_perf_callback>())).perf_log as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_perf_callback),
            "::",
            stringify!(perf_log)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_sensor_action {
    RETRO_SENSOR_ACCELEROMETER_ENABLE = 0,
    RETRO_SENSOR_ACCELEROMETER_DISABLE = 1,
    RETRO_SENSOR_DUMMY = 2147483647,
}
pub type retro_set_sensor_state_t = ::std::option::Option<
    unsafe extern "C" fn(
        port: ::std::os::raw::c_uint,
        action: retro_sensor_action,
        rate: ::std::os::raw::c_uint,
    ) -> bool,
>;
pub type retro_sensor_get_input_t = ::std::option::Option<
    unsafe extern "C" fn(port: ::std::os::raw::c_uint, id: ::std::os::raw::c_uint) -> f32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_sensor_interface {
    pub set_sensor_state: retro_set_sensor_state_t,
    pub get_sensor_input: retro_sensor_get_input_t,
}
#[test]
fn bindgen_test_layout_retro_sensor_interface() {
    assert_eq!(
        ::std::mem::size_of::<retro_sensor_interface>(),
        16usize,
        concat!("Size of: ", stringify!(retro_sensor_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_sensor_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_sensor_interface))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_sensor_interface>())).set_sensor_state as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_sensor_interface),
            "::",
            stringify!(set_sensor_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_sensor_interface>())).get_sensor_input as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_sensor_interface),
            "::",
            stringify!(get_sensor_input)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_camera_buffer {
    RETRO_CAMERA_BUFFER_OPENGL_TEXTURE = 0,
    RETRO_CAMERA_BUFFER_RAW_FRAMEBUFFER = 1,
    RETRO_CAMERA_BUFFER_DUMMY = 2147483647,
}
pub type retro_camera_start_t = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type retro_camera_stop_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type retro_camera_lifetime_status_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type retro_camera_frame_raw_framebuffer_t = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: *const u32,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        pitch: size_t,
    ),
>;
pub type retro_camera_frame_opengl_texture_t = ::std::option::Option<
    unsafe extern "C" fn(
        texture_id: ::std::os::raw::c_uint,
        texture_target: ::std::os::raw::c_uint,
        affine: *const f32,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_camera_callback {
    pub caps: u64,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub start: retro_camera_start_t,
    pub stop: retro_camera_stop_t,
    pub frame_raw_framebuffer: retro_camera_frame_raw_framebuffer_t,
    pub frame_opengl_texture: retro_camera_frame_opengl_texture_t,
    pub initialized: retro_camera_lifetime_status_t,
    pub deinitialized: retro_camera_lifetime_status_t,
}
#[test]
fn bindgen_test_layout_retro_camera_callback() {
    assert_eq!(
        ::std::mem::size_of::<retro_camera_callback>(),
        64usize,
        concat!("Size of: ", stringify!(retro_camera_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_camera_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_camera_callback))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_camera_callback>())).caps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_camera_callback),
            "::",
            stringify!(caps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_camera_callback>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_camera_callback),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_camera_callback>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_camera_callback),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_camera_callback>())).start as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_camera_callback),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_camera_callback>())).stop as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_camera_callback),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_camera_callback>())).frame_raw_framebuffer as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_camera_callback),
            "::",
            stringify!(frame_raw_framebuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_camera_callback>())).frame_opengl_texture as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_camera_callback),
            "::",
            stringify!(frame_opengl_texture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_camera_callback>())).initialized as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_camera_callback),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_camera_callback>())).deinitialized as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_camera_callback),
            "::",
            stringify!(deinitialized)
        )
    );
}
pub type retro_location_set_interval_t = ::std::option::Option<
    unsafe extern "C" fn(
        interval_ms: ::std::os::raw::c_uint,
        interval_distance: ::std::os::raw::c_uint,
    ),
>;
pub type retro_location_start_t = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type retro_location_stop_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type retro_location_get_position_t = ::std::option::Option<
    unsafe extern "C" fn(
        lat: *mut f64,
        lon: *mut f64,
        horiz_accuracy: *mut f64,
        vert_accuracy: *mut f64,
    ) -> bool,
>;
pub type retro_location_lifetime_status_t = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_location_callback {
    pub start: retro_location_start_t,
    pub stop: retro_location_stop_t,
    pub get_position: retro_location_get_position_t,
    pub set_interval: retro_location_set_interval_t,
    pub initialized: retro_location_lifetime_status_t,
    pub deinitialized: retro_location_lifetime_status_t,
}
#[test]
fn bindgen_test_layout_retro_location_callback() {
    assert_eq!(
        ::std::mem::size_of::<retro_location_callback>(),
        48usize,
        concat!("Size of: ", stringify!(retro_location_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_location_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_location_callback))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_location_callback>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_location_callback),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_location_callback>())).stop as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_location_callback),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_location_callback>())).get_position as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_location_callback),
            "::",
            stringify!(get_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_location_callback>())).set_interval as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_location_callback),
            "::",
            stringify!(set_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_location_callback>())).initialized as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_location_callback),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_location_callback>())).deinitialized as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_location_callback),
            "::",
            stringify!(deinitialized)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_rumble_effect {
    RETRO_RUMBLE_STRONG = 0,
    RETRO_RUMBLE_WEAK = 1,
    RETRO_RUMBLE_DUMMY = 2147483647,
}
pub type retro_set_rumble_state_t = ::std::option::Option<
    unsafe extern "C" fn(
        port: ::std::os::raw::c_uint,
        effect: retro_rumble_effect,
        strength: u16,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_rumble_interface {
    pub set_rumble_state: retro_set_rumble_state_t,
}
#[test]
fn bindgen_test_layout_retro_rumble_interface() {
    assert_eq!(
        ::std::mem::size_of::<retro_rumble_interface>(),
        8usize,
        concat!("Size of: ", stringify!(retro_rumble_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_rumble_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_rumble_interface))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_rumble_interface>())).set_rumble_state as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_rumble_interface),
            "::",
            stringify!(set_rumble_state)
        )
    );
}
pub type retro_audio_callback_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type retro_audio_set_state_callback_t =
    ::std::option::Option<unsafe extern "C" fn(enabled: bool)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_audio_callback {
    pub callback: retro_audio_callback_t,
    pub set_state: retro_audio_set_state_callback_t,
}
#[test]
fn bindgen_test_layout_retro_audio_callback() {
    assert_eq!(
        ::std::mem::size_of::<retro_audio_callback>(),
        16usize,
        concat!("Size of: ", stringify!(retro_audio_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_audio_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_audio_callback))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_audio_callback>())).callback as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_audio_callback),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_audio_callback>())).set_state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_audio_callback),
            "::",
            stringify!(set_state)
        )
    );
}
pub type retro_usec_t = i64;
pub type retro_frame_time_callback_t =
    ::std::option::Option<unsafe extern "C" fn(usec: retro_usec_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_frame_time_callback {
    pub callback: retro_frame_time_callback_t,
    pub reference: retro_usec_t,
}
#[test]
fn bindgen_test_layout_retro_frame_time_callback() {
    assert_eq!(
        ::std::mem::size_of::<retro_frame_time_callback>(),
        16usize,
        concat!("Size of: ", stringify!(retro_frame_time_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_frame_time_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_frame_time_callback))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_frame_time_callback>())).callback as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_frame_time_callback),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_frame_time_callback>())).reference as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_frame_time_callback),
            "::",
            stringify!(reference)
        )
    );
}
pub type retro_hw_context_reset_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type retro_hw_get_current_framebuffer_t =
    ::std::option::Option<unsafe extern "C" fn() -> usize>;
pub type retro_hw_get_proc_address_t = ::std::option::Option<
    unsafe extern "C" fn(sym: *const ::std::os::raw::c_char) -> retro_proc_address_t,
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_hw_context_type {
    RETRO_HW_CONTEXT_NONE = 0,
    RETRO_HW_CONTEXT_OPENGL = 1,
    RETRO_HW_CONTEXT_OPENGLES2 = 2,
    RETRO_HW_CONTEXT_OPENGL_CORE = 3,
    RETRO_HW_CONTEXT_OPENGLES3 = 4,
    RETRO_HW_CONTEXT_OPENGLES_VERSION = 5,
    RETRO_HW_CONTEXT_VULKAN = 6,
    RETRO_HW_CONTEXT_DIRECT3D = 7,
    RETRO_HW_CONTEXT_DUMMY = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_hw_render_callback {
    pub context_type: retro_hw_context_type,
    pub context_reset: retro_hw_context_reset_t,
    pub get_current_framebuffer: retro_hw_get_current_framebuffer_t,
    pub get_proc_address: retro_hw_get_proc_address_t,
    pub depth: bool,
    pub stencil: bool,
    pub bottom_left_origin: bool,
    pub version_major: ::std::os::raw::c_uint,
    pub version_minor: ::std::os::raw::c_uint,
    pub cache_context: bool,
    pub context_destroy: retro_hw_context_reset_t,
    pub debug_context: bool,
}
#[test]
fn bindgen_test_layout_retro_hw_render_callback() {
    assert_eq!(
        ::std::mem::size_of::<retro_hw_render_callback>(),
        64usize,
        concat!("Size of: ", stringify!(retro_hw_render_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_hw_render_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_hw_render_callback))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_hw_render_callback>())).context_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_hw_render_callback),
            "::",
            stringify!(context_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_hw_render_callback>())).context_reset as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_hw_render_callback),
            "::",
            stringify!(context_reset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_hw_render_callback>())).get_current_framebuffer as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_hw_render_callback),
            "::",
            stringify!(get_current_framebuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_hw_render_callback>())).get_proc_address as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_hw_render_callback),
            "::",
            stringify!(get_proc_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_hw_render_callback>())).depth as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_hw_render_callback),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_hw_render_callback>())).stencil as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_hw_render_callback),
            "::",
            stringify!(stencil)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_hw_render_callback>())).bottom_left_origin as *const _
                as usize
        },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_hw_render_callback),
            "::",
            stringify!(bottom_left_origin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_hw_render_callback>())).version_major as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_hw_render_callback),
            "::",
            stringify!(version_major)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_hw_render_callback>())).version_minor as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_hw_render_callback),
            "::",
            stringify!(version_minor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_hw_render_callback>())).cache_context as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_hw_render_callback),
            "::",
            stringify!(cache_context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_hw_render_callback>())).context_destroy as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_hw_render_callback),
            "::",
            stringify!(context_destroy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_hw_render_callback>())).debug_context as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_hw_render_callback),
            "::",
            stringify!(debug_context)
        )
    );
}
pub type retro_keyboard_event_t = ::std::option::Option<
    unsafe extern "C" fn(
        down: bool,
        keycode: ::std::os::raw::c_uint,
        character: u32,
        key_modifiers: u16,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_keyboard_callback {
    pub callback: retro_keyboard_event_t,
}
#[test]
fn bindgen_test_layout_retro_keyboard_callback() {
    assert_eq!(
        ::std::mem::size_of::<retro_keyboard_callback>(),
        8usize,
        concat!("Size of: ", stringify!(retro_keyboard_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_keyboard_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_keyboard_callback))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_keyboard_callback>())).callback as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_keyboard_callback),
            "::",
            stringify!(callback)
        )
    );
}
pub type retro_set_eject_state_t =
    ::std::option::Option<unsafe extern "C" fn(ejected: bool) -> bool>;
pub type retro_get_eject_state_t = ::std::option::Option<unsafe extern "C" fn() -> bool>;
pub type retro_get_image_index_t =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>;
pub type retro_set_image_index_t =
    ::std::option::Option<unsafe extern "C" fn(index: ::std::os::raw::c_uint) -> bool>;
pub type retro_get_num_images_t =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_uint>;
pub type retro_replace_image_index_t = ::std::option::Option<
    unsafe extern "C" fn(index: ::std::os::raw::c_uint, info: *const retro_game_info) -> bool,
>;
pub type retro_add_image_index_t = ::std::option::Option<unsafe extern "C" fn() -> bool>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_disk_control_callback {
    pub set_eject_state: retro_set_eject_state_t,
    pub get_eject_state: retro_get_eject_state_t,
    pub get_image_index: retro_get_image_index_t,
    pub set_image_index: retro_set_image_index_t,
    pub get_num_images: retro_get_num_images_t,
    pub replace_image_index: retro_replace_image_index_t,
    pub add_image_index: retro_add_image_index_t,
}
#[test]
fn bindgen_test_layout_retro_disk_control_callback() {
    assert_eq!(
        ::std::mem::size_of::<retro_disk_control_callback>(),
        56usize,
        concat!("Size of: ", stringify!(retro_disk_control_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_disk_control_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_disk_control_callback))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_disk_control_callback>())).set_eject_state as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_disk_control_callback),
            "::",
            stringify!(set_eject_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_disk_control_callback>())).get_eject_state as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_disk_control_callback),
            "::",
            stringify!(get_eject_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_disk_control_callback>())).get_image_index as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_disk_control_callback),
            "::",
            stringify!(get_image_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_disk_control_callback>())).set_image_index as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_disk_control_callback),
            "::",
            stringify!(set_image_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_disk_control_callback>())).get_num_images as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_disk_control_callback),
            "::",
            stringify!(get_num_images)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_disk_control_callback>())).replace_image_index as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_disk_control_callback),
            "::",
            stringify!(replace_image_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_disk_control_callback>())).add_image_index as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_disk_control_callback),
            "::",
            stringify!(add_image_index)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum retro_pixel_format {
    RETRO_PIXEL_FORMAT_0RGB1555 = 0,
    RETRO_PIXEL_FORMAT_XRGB8888 = 1,
    RETRO_PIXEL_FORMAT_RGB565 = 2,
    RETRO_PIXEL_FORMAT_UNKNOWN = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_message {
    pub msg: *const ::std::os::raw::c_char,
    pub frames: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_retro_message() {
    assert_eq!(
        ::std::mem::size_of::<retro_message>(),
        16usize,
        concat!("Size of: ", stringify!(retro_message))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_message>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_message))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_message>())).msg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_message),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_message>())).frames as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_message),
            "::",
            stringify!(frames)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_input_descriptor {
    pub port: ::std::os::raw::c_uint,
    pub device: ::std::os::raw::c_uint,
    pub index: ::std::os::raw::c_uint,
    pub id: ::std::os::raw::c_uint,
    pub description: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_retro_input_descriptor() {
    assert_eq!(
        ::std::mem::size_of::<retro_input_descriptor>(),
        24usize,
        concat!("Size of: ", stringify!(retro_input_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_input_descriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_input_descriptor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_input_descriptor>())).port as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_input_descriptor),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_input_descriptor>())).device as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_input_descriptor),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_input_descriptor>())).index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_input_descriptor),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_input_descriptor>())).id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_input_descriptor),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_input_descriptor>())).description as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_input_descriptor),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_system_info {
    pub library_name: *const ::std::os::raw::c_char,
    pub library_version: *const ::std::os::raw::c_char,
    pub valid_extensions: *const ::std::os::raw::c_char,
    pub need_fullpath: bool,
    pub block_extract: bool,
}
#[test]
fn bindgen_test_layout_retro_system_info() {
    assert_eq!(
        ::std::mem::size_of::<retro_system_info>(),
        32usize,
        concat!("Size of: ", stringify!(retro_system_info))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_system_info>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_system_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_system_info>())).library_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_system_info),
            "::",
            stringify!(library_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_system_info>())).library_version as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_system_info),
            "::",
            stringify!(library_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_system_info>())).valid_extensions as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_system_info),
            "::",
            stringify!(valid_extensions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_system_info>())).need_fullpath as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_system_info),
            "::",
            stringify!(need_fullpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_system_info>())).block_extract as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_system_info),
            "::",
            stringify!(block_extract)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_game_geometry {
    pub base_width: ::std::os::raw::c_uint,
    pub base_height: ::std::os::raw::c_uint,
    pub max_width: ::std::os::raw::c_uint,
    pub max_height: ::std::os::raw::c_uint,
    pub aspect_ratio: f32,
}
#[test]
fn bindgen_test_layout_retro_game_geometry() {
    assert_eq!(
        ::std::mem::size_of::<retro_game_geometry>(),
        20usize,
        concat!("Size of: ", stringify!(retro_game_geometry))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_game_geometry>(),
        4usize,
        concat!("Alignment of ", stringify!(retro_game_geometry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_game_geometry>())).base_width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_game_geometry),
            "::",
            stringify!(base_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_game_geometry>())).base_height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_game_geometry),
            "::",
            stringify!(base_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_game_geometry>())).max_width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_game_geometry),
            "::",
            stringify!(max_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_game_geometry>())).max_height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_game_geometry),
            "::",
            stringify!(max_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_game_geometry>())).aspect_ratio as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_game_geometry),
            "::",
            stringify!(aspect_ratio)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_system_timing {
    pub fps: f64,
    pub sample_rate: f64,
}
#[test]
fn bindgen_test_layout_retro_system_timing() {
    assert_eq!(
        ::std::mem::size_of::<retro_system_timing>(),
        16usize,
        concat!("Size of: ", stringify!(retro_system_timing))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_system_timing>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_system_timing))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_system_timing>())).fps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_system_timing),
            "::",
            stringify!(fps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_system_timing>())).sample_rate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_system_timing),
            "::",
            stringify!(sample_rate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_system_av_info {
    pub geometry: retro_game_geometry,
    pub timing: retro_system_timing,
}
#[test]
fn bindgen_test_layout_retro_system_av_info() {
    assert_eq!(
        ::std::mem::size_of::<retro_system_av_info>(),
        40usize,
        concat!("Size of: ", stringify!(retro_system_av_info))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_system_av_info>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_system_av_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_system_av_info>())).geometry as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_system_av_info),
            "::",
            stringify!(geometry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_system_av_info>())).timing as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_system_av_info),
            "::",
            stringify!(timing)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_variable {
    pub key: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_retro_variable() {
    assert_eq!(
        ::std::mem::size_of::<retro_variable>(),
        16usize,
        concat!("Size of: ", stringify!(retro_variable))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_variable>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_variable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_variable>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_variable),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_variable>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_variable),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_core_option_display {
    pub key: *const ::std::os::raw::c_char,
    pub visible: bool,
}
#[test]
fn bindgen_test_layout_retro_core_option_display() {
    assert_eq!(
        ::std::mem::size_of::<retro_core_option_display>(),
        16usize,
        concat!("Size of: ", stringify!(retro_core_option_display))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_core_option_display>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_core_option_display))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_core_option_display>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_core_option_display),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_core_option_display>())).visible as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_core_option_display),
            "::",
            stringify!(visible)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_core_option_value {
    pub value: *const ::std::os::raw::c_char,
    pub label: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_retro_core_option_value() {
    assert_eq!(
        ::std::mem::size_of::<retro_core_option_value>(),
        16usize,
        concat!("Size of: ", stringify!(retro_core_option_value))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_core_option_value>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_core_option_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_core_option_value>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_core_option_value),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_core_option_value>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_core_option_value),
            "::",
            stringify!(label)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct retro_core_option_definition {
    pub key: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub info: *const ::std::os::raw::c_char,
    pub values: [retro_core_option_value; 128usize],
    pub default_value: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_retro_core_option_definition() {
    assert_eq!(
        ::std::mem::size_of::<retro_core_option_definition>(),
        2080usize,
        concat!("Size of: ", stringify!(retro_core_option_definition))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_core_option_definition>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_core_option_definition))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_core_option_definition>())).key as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_core_option_definition),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_core_option_definition>())).desc as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_core_option_definition),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_core_option_definition>())).info as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_core_option_definition),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_core_option_definition>())).values as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_core_option_definition),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<retro_core_option_definition>())).default_value as *const _
                as usize
        },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_core_option_definition),
            "::",
            stringify!(default_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_core_options_intl {
    pub us: *mut retro_core_option_definition,
    pub local: *mut retro_core_option_definition,
}
#[test]
fn bindgen_test_layout_retro_core_options_intl() {
    assert_eq!(
        ::std::mem::size_of::<retro_core_options_intl>(),
        16usize,
        concat!("Size of: ", stringify!(retro_core_options_intl))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_core_options_intl>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_core_options_intl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_core_options_intl>())).us as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_core_options_intl),
            "::",
            stringify!(us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_core_options_intl>())).local as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_core_options_intl),
            "::",
            stringify!(local)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_game_info {
    pub path: *const ::std::os::raw::c_char,
    pub data: *const ::std::os::raw::c_void,
    pub size: size_t,
    pub meta: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_retro_game_info() {
    assert_eq!(
        ::std::mem::size_of::<retro_game_info>(),
        32usize,
        concat!("Size of: ", stringify!(retro_game_info))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_game_info>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_game_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_game_info>())).path as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_game_info),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_game_info>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_game_info),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_game_info>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_game_info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_game_info>())).meta as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_game_info),
            "::",
            stringify!(meta)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct retro_framebuffer {
    pub data: *mut ::std::os::raw::c_void,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub pitch: size_t,
    pub format: retro_pixel_format,
    pub access_flags: ::std::os::raw::c_uint,
    pub memory_flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_retro_framebuffer() {
    assert_eq!(
        ::std::mem::size_of::<retro_framebuffer>(),
        40usize,
        concat!("Size of: ", stringify!(retro_framebuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<retro_framebuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(retro_framebuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_framebuffer>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_framebuffer),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_framebuffer>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_framebuffer),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_framebuffer>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_framebuffer),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_framebuffer>())).pitch as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_framebuffer),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_framebuffer>())).format as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_framebuffer),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_framebuffer>())).access_flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_framebuffer),
            "::",
            stringify!(access_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<retro_framebuffer>())).memory_flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(retro_framebuffer),
            "::",
            stringify!(memory_flags)
        )
    );
}
pub type retro_environment_t = ::std::option::Option<
    unsafe extern "C" fn(cmd: ::std::os::raw::c_uint, data: *mut ::std::os::raw::c_void) -> bool,
>;
pub type retro_video_refresh_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const ::std::os::raw::c_void,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        pitch: size_t,
    ),
>;
pub type retro_audio_sample_t = ::std::option::Option<unsafe extern "C" fn(left: i16, right: i16)>;
pub type retro_audio_sample_batch_t =
    ::std::option::Option<unsafe extern "C" fn(data: *const i16, frames: size_t) -> size_t>;
pub type retro_input_poll_t = ::std::option::Option<unsafe extern "C" fn()>;
pub type retro_input_state_t = ::std::option::Option<
    unsafe extern "C" fn(
        port: ::std::os::raw::c_uint,
        device: ::std::os::raw::c_uint,
        index: ::std::os::raw::c_uint,
        id: ::std::os::raw::c_uint,
    ) -> i16,
>;
extern "C" {
    pub fn retro_set_environment(arg1: retro_environment_t);
}
extern "C" {
    pub fn retro_set_video_refresh(arg1: retro_video_refresh_t);
}
extern "C" {
    pub fn retro_set_audio_sample(arg1: retro_audio_sample_t);
}
extern "C" {
    pub fn retro_set_audio_sample_batch(arg1: retro_audio_sample_batch_t);
}
extern "C" {
    pub fn retro_set_input_poll(arg1: retro_input_poll_t);
}
extern "C" {
    pub fn retro_set_input_state(arg1: retro_input_state_t);
}
extern "C" {
    pub fn retro_init();
}
extern "C" {
    pub fn retro_deinit();
}
extern "C" {
    pub fn retro_api_version() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn retro_get_system_info(info: *mut retro_system_info);
}
extern "C" {
    pub fn retro_get_system_av_info(info: *mut retro_system_av_info);
}
extern "C" {
    pub fn retro_set_controller_port_device(
        port: ::std::os::raw::c_uint,
        device: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn retro_reset();
}
extern "C" {
    pub fn retro_run();
}
extern "C" {
    pub fn retro_serialize_size() -> size_t;
}
extern "C" {
    pub fn retro_serialize(data: *mut ::std::os::raw::c_void, size: size_t) -> bool;
}
extern "C" {
    pub fn retro_unserialize(data: *const ::std::os::raw::c_void, size: size_t) -> bool;
}
extern "C" {
    pub fn retro_cheat_reset();
}
extern "C" {
    pub fn retro_cheat_set(
        index: ::std::os::raw::c_uint,
        enabled: bool,
        code: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn retro_load_game(game: *const retro_game_info) -> bool;
}
extern "C" {
    pub fn retro_load_game_special(
        game_type: ::std::os::raw::c_uint,
        info: *const retro_game_info,
        num_info: size_t,
    ) -> bool;
}
extern "C" {
    pub fn retro_unload_game();
}
extern "C" {
    pub fn retro_get_region() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn retro_get_memory_data(id: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn retro_get_memory_size(id: ::std::os::raw::c_uint) -> size_t;
}
extern "C" {
    pub fn emuka_load_battery(path: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn emuka_save_battery(path: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn emuka_set_audio_frequency(frequency: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn emuka_evaluate(
        expr: *const ::std::os::raw::c_char,
        result: *mut u16,
        result_bank: *mut u16,
    ) -> bool;
}
extern "C" {
    pub fn emuka_run_stealth(jump_location: u16, registers: *mut u16);
}
